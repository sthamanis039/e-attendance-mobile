/* eslint-disable no-plusplus */
const calendarData = {
  1970: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1971: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],
  1972: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  1973: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  1974: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1975: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  1976: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  1977: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
  1978: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1979: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  1980: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  1981: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  1982: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1983: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  1984: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  1985: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  1986: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1987: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  1988: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  1989: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1990: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1991: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  1992: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  1993: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1994: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1995: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  1996: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  1997: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1998: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  1999: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2000: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  2001: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2002: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2003: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2004: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  2005: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2006: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2007: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2008: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
  2009: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2010: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2011: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2012: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2013: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2014: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2015: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2016: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2017: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2018: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2019: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  2020: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2021: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2022: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  2023: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  2024: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2025: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2026: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2027: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  2028: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2029: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],
  2030: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2031: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  2032: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2033: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2034: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2035: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
  2036: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2037: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2038: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2039: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2040: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2041: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2042: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2043: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2044: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2045: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2046: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2047: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2048: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2049: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  2050: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  2051: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2052: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2053: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  2054: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  2055: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2056: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],
  2057: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2058: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
  2059: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2060: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2061: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2062: [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365],
  2063: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2064: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2065: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2066: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
  2067: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2068: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2069: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2070: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2071: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2072: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2073: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2074: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2075: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2076: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  2077: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
  2078: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
  2081: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366],
  2082: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2083: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2084: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2085: [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366],
  2086: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2087: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],
  2088: [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365],
  2089: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2090: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
  2091: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],
  2092: [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366],
  2093: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
  2094: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2095: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
  2096: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
  2097: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
  2098: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
  2099: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
};

const days = ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'];
const months = [
  'वैशाख',
  'जेठ',
  'असार',
  'साउन',
  'भदौ',
  'असोज',
  'कात्तिक',
  'मंसिर',
  'पुष',
  'माघ',
  'फागुन',
  'चैत',
];
const m = {
  0: 29,
  1: 30,
  2: 31,
  3: 32,
  a: [2, 2, 3, 2, 2, 2, 1, 0, 1, 0, 1, 1],
  b: [2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1],
  c: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 1],
  d: [1, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 2],
  e: [2, 2, 3, 1, 2, 2, 1, 0, 1, 0, 1, 1],
  f: [2, 2, 3, 3, 1, 2, 1, 0, 1, 0, 1, 1],
  g: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2],
  h: [1, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2],
  i: [2, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  j: [1, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2],
  k: [2, 2, 2, 3, 2, 2, 0, 1, 1, 0, 1, 1],
  l: [2, 3, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  m: [2, 2, 2, 3, 2, 2, 1, 0, 1, 0, 1, 1],
  n: [1, 2, 3, 2, 2, 2, 1, 0, 1, 0, 1, 1],
  o: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 1],
  p: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 0, 2],
  q: [2, 2, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2],
  r: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 2],
  s: [1, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2],
  t: [2, 2, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1],
  u: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 1, 1],
  v: [2, 2, 3, 2, 2, 1, 1, 1, 0, 1, 1, 1],
  w: [2, 3, 2, 3, 2, 2, 1, 1, 0, 1, 1, 1],
  x: [2, 2, 3, 2, 2, 2, 1, 1, 0, 1, 1, 1],
  y: [1, 2, 3, 3, 1, 2, 1, 1, 0, 1, 1, 1],
  z: [2, 2, 3, 2, 2, 2, 1, 0, 1, 1, 1, 1],
  aa: [1, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  ab: [2, 2, 3, 2, 2, 2, 0, 1, 0, 1, 1, 2],
  ac: [2, 2, 3, 2, 2, 2, 1, 0, 0, 1, 1, 1],
  ad: [2, 3, 2, 3, 1, 2, 1, 0, 1, 0, 1, 1],
  ae: [1, 3, 2, 3, 2, 1, 1, 1, 0, 1, 1, 1],
  af: [2, 3, 2, 3, 1, 2, 1, 1, 0, 1, 1, 1],
  ag: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2],
};

const d = {
  1970: [0, ...m.a],
  1971: [1, ...m.b],
  1972: [2, ...m.c],
  1973: [4, ...m.d],
  1974: [5, ...m.e],
  1975: [6, ...m.f],
  1976: [0, ...m.g],
  1977: [2, ...m.h],
  1978: [3, ...m.a],
  1979: [4, ...m.i],
  1980: [5, ...m.j],
  1981: [0, ...m.k],
  1982: [1, ...m.a],
  1983: [2, ...m.i],
  1984: [3, ...m.g],
  1985: [5, ...m.k],
  1986: [6, ...m.a],
  1987: [0, ...m.l],
  1988: [1, ...m.g],
  1989: [3, ...m.m],
  1990: [4, ...m.n],
  1991: [5, ...m.l],
  1992: [6, ...m.o],
  1993: [1, ...m.m],
  1994: [2, ...m.m],
  1995: [3, ...m.m],
  1996: [4, ...m.m],
  1997: [6, ...m.m],
  1998: [0, ...m.m],
  1999: [1, ...m.m],
  2000: [3, ...m.p],
  2001: [4, ...m.a],
  2002: [5, ...m.i],
  2003: [6, ...m.g],
  2004: [1, ...m.d],
  2005: [2, ...m.a],
  2006: [3, ...m.i],
  2007: [4, ...m.g],
  2008: [6, ...m.q],
  2009: [0, ...m.a],
  2010: [1, ...m.i],
  2011: [2, ...m.g],
  2012: [4, ...m.k],
  2013: [5, ...m.a],
  2014: [6, ...m.i],
  2015: [0, ...m.g],
  2016: [2, ...m.k],
  2017: [3, ...m.a],
  2018: [4, ...m.l],
  2019: [5, ...m.r],
  2020: [0, ...m.m],
  2021: [1, ...m.a],
  2022: [2, ...m.c],
  2023: [3, ...m.r],
  2024: [5, ...m.m],
  2025: [6, ...m.a],
  2026: [0, ...m.g],
  2027: [2, ...m.d],
  2028: [3, ...m.a],
  2029: [4, ...m.b],
  2030: [5, ...m.g],
  2031: [0, ...m.d],
  2032: [1, ...m.a],
  2033: [2, ...m.i],
  2034: [3, ...m.g],
  2035: [5, ...m.s],
  2036: [6, ...m.a],
  2037: [0, ...m.i],
  2038: [1, ...m.g],
  2039: [3, ...m.k],
  2040: [4, ...m.a],
  2041: [5, ...m.i],
  2042: [6, ...m.g],
  2043: [1, ...m.k],
  2044: [2, ...m.a],
  2045: [3, ...m.l],
  2046: [4, ...m.g],
  2047: [6, ...m.m],
  2048: [0, ...m.a],
  2049: [1, ...m.c],
  2050: [2, ...m.r],
  2051: [4, ...m.m],
  2052: [5, ...m.a],
  2053: [6, ...m.c],
  2054: [0, ...m.r],
  2055: [2, ...m.a],
  2056: [3, ...m.b],
  2057: [4, ...m.g],
  2058: [6, ...m.d],
  2059: [0, ...m.a],
  2060: [1, ...m.i],
  2061: [2, ...m.g],
  2062: [4, ...m.h],
  2063: [5, ...m.a],
  2064: [6, ...m.i],
  2065: [0, ...m.g],
  2066: [2, ...m.q],
  2067: [3, ...m.a],
  2068: [4, ...m.i],
  2069: [5, ...m.g],
  2070: [0, ...m.k],
  2071: [1, ...m.a],
  2072: [2, ...m.l],
  2073: [3, ...m.g],
  2074: [5, ...m.m],
  2075: [6, ...m.a],
  2076: [0, ...m.c],
  2077: [1, ...m.r],
  2078: [3, ...m.m],
  2079: [4, ...m.a],
  2080: [5, ...m.c],
  2081: [6, ...m.u],
  2082: [1, ...m.ae],
  2083: [2, ...m.v],
  2084: [3, ...m.v],
  2085: [4, ...m.af],
  2086: [6, ...m.ae],
  2087: [0, ...m.x],
  2088: [2, ...m.y],
  2089: [3, ...m.ae],
  2090: [4, ...m.ae],
  2091: [5, ...m.x],
  2092: [0, ...m.t],
  2093: [1, ...m.q],
  2094: [2, ...m.a],
  2095: [3, ...m.i],
  2096: [5, ...m.ag],
  2097: [5, ...m.k],
  2098: [0, ...m.a],
  2099: [1, ...m.i],
};

const getSeparatedDateFromBsDate = BsDate => {
  let splittedDate = ['-', '-', '-'];
  if (BsDate) {
    splittedDate = BsDate.split('-');
  }
  return {
    day: splittedDate[2],
    month: splittedDate[1],
    year: splittedDate[0],
  };
};

const findPassedDaysInThatYear = (year, month, day) => {
  let totalDays = 0;
  for (let i = 0; i < month - 1; i++) {
    totalDays += calendarData[year][i];
  }
  if (day <= calendarData[year][month - 1]) {
    totalDays += Number(day);
  } else {
    totalDays += calendarData[year][month - 1];
  }
  return totalDays;
};

const getMilliDifference = date => {
  let dayDiff = 0;
  const dateObject = getSeparatedDateFromBsDate(date);
  const {year, month, day} = dateObject;
  const passedDays = findPassedDaysInThatYear(year, month, day);
  if (year > 2026) {
    for (let i = 2027; i < year; i++) {
      dayDiff += calendarData[i][12];
    }
    dayDiff += passedDays + 102;
  } else if (year < 2026) {
    for (let i = 2025; i > year; i--) {
      dayDiff -= calendarData[i][12];
    }
    dayDiff -= calendarData[year][12] - passedDays + 264;
  } else {
    dayDiff += passedDays - 264;
  }
  return dayDiff * 24 * 60 * 60 * 1000;
};

const BSToAD = givenDate => {
  const date = givenDate.replace('/', '-');
  const dateData = date.split('-').map(d => parseInt(d, 10));

  if (
    dateData.length < 3 ||
    !(dateData[0] > 1969 && dateData[0] < 2100) ||
    !(dateData[1] > 0 && dateData[1] < 13) ||
    !(
      dateData[2] > 0 &&
      dateData[2] <= calendarData[dateData[0]][dateData[1] - 1]
    )
  ) {
    return null;
  }
  const dateObject = new Date(getMilliDifference(date));
  const year = dateObject.getFullYear();
  const month = `0${dateObject.getMonth() + 1}`.slice(-2);
  const day = `0${dateObject.getDate()}`.slice(-2);
  return `${year}-${month}-${day}`;
};

const getDateMilliseconds = (date, dateType) => {
  // eslint-disable-next-line no-param-reassign
  dateType = dateType || 'BS';
  if (dateType === 'BS') {
    // eslint-disable-next-line no-param-reassign
    date = BSToAD(date);
  }
  return new Date(date).getTime();
};

const findBsDateFromTotalNumberOfDays = (giveYear, givenDays) => {
  let days = Number(givenDays);
  const year = Number(giveYear);
  let month = 0;

  for (let i = 0; i < 12; i++) {
    if (days <= calendarData[year][i]) {
      month = i + 1;
      break;
    } else {
      days -= calendarData[year][i];
    }
  }

  return {
    bsYear: year,
    bsMonth: month,
    bsDay: days,
  };
};

const findLastDayOfMonthOfAdDate = (givenYear, givenMonth) => {
  let year = givenYear;
  let nextMonth = Number(givenMonth) + 1;
  if (nextMonth > 12) {
    nextMonth = 1;
    year = Number(year) + 1;
  }
  const milliDate =
    new Date(`${year}-${`0${nextMonth}`.slice(-2)}-01`).getTime() -
    24 * 60 * 60 * 1000;
  return new Date(milliDate).getDate();
};

const findLastDayOfMonthOfBsDate = (givenYear, givenMonth) => {
  const year = Number(givenYear);
  const month = Number(givenMonth);
  if ((year < 1970 && year > 2099) || (month > 0 && month < 13)) {
    return calendarData[year][month - 1];
  }
  return null;
};

const ADToBS = givenDate => {
  let date = givenDate.replace('/', '-');
  const separatedDate = date.split('-');
  if (
    separatedDate.length < 3 ||
    !(separatedDate[1] > 0 && separatedDate[1] < 13) ||
    !(
      separatedDate[2] > 0 &&
      separatedDate[2] <=
        findLastDayOfMonthOfAdDate(separatedDate[0], separatedDate[1])
    )
  ) {
    return null;
  }
  date = `${separatedDate[0]}-${`0${separatedDate[1]}`.slice(
    -2,
  )}-${`0${separatedDate[2]}`.slice(-2)}`;

  const dateInMillisecond = new Date(date).getTime();
  if (
    dateInMillisecond >= -1789948800000 &&
    dateInMillisecond <= 2312582400000
  ) {
    let equivalentDay = dateInMillisecond / (24 * 60 * 60 * 1000);
    let year = 2026;
    let currentYear = 0;
    let currentMonth = 0;
    let currentDay = 0;
    let bsDateObject;
    if (equivalentDay > 102) {
      equivalentDay -= 102;
      while (equivalentDay > 0) {
        equivalentDay -= calendarData[year + 1][12];
        if (equivalentDay <= 0) {
          bsDateObject = findBsDateFromTotalNumberOfDays(
            year + 1,
            equivalentDay + calendarData[year + 1][12],
          );
        } else {
          year++;
        }
      }
    } else if (equivalentDay < -264) {
      equivalentDay = -equivalentDay;
      equivalentDay -= 264;
      while (equivalentDay > 0) {
        equivalentDay -= calendarData[year - 1][12];
        if (equivalentDay <= 0) {
          if (equivalentDay === 0) {
            bsDateObject = findBsDateFromTotalNumberOfDays(
              year - 2,
              calendarData[year - 2][12],
            );
          } else {
            bsDateObject = findBsDateFromTotalNumberOfDays(
              year - 1,
              -equivalentDay,
            );
          }
        } else {
          year--;
        }
      }
    } else {
      bsDateObject = findBsDateFromTotalNumberOfDays(
        year,
        264 + Number(equivalentDay),
      );
    }
    currentDay = bsDateObject.bsDay;
    currentMonth = bsDateObject.bsMonth;
    currentYear = bsDateObject.bsYear;
    return `${currentYear}-${`0${currentMonth}`.slice(
      -2,
    )}-${`0${currentDay}`.slice(-2)}`;
  }
  return null;
};

const currentYear = year => {
  let isFirst = 1;
  const yearData = [];
  let total = 1;
  d[year].reduce((a, v) => {
    if (isFirst) {
      yearData.push({weekStart: a, endDate: m[v]});
      total = a + m[v];
      isFirst = 0;
    } else {
      yearData.push({
        weekStart: total % 7 === 0 ? 0 : total % 7,
        endDate: m[v],
      });
      total += m[v];
    }
    return null;
  });
  return yearData;
};

const getYears = () => {
  return Object.keys(d);
};

const getCurrentDate = () => {
  const today = new Date().toISOString();
  const dateString = today.split('T')[0];
  const bsDateString = ADToBS(dateString);
  return bsDateString;
};

module.exports = {
  days,
  months,
  currentYear,
  getCurrentDate,
  getYears,
  BSToAD,
  getDateMilliseconds,
  findLastDayOfMonthOfAdDate,
  findLastDayOfMonthOfBsDate,
  ADToBS,
};
